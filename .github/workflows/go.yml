---

name: "Go"
run-name: "Go workflow started by @${{ github.actor }}"
permissions: read-all

on:
  push:

defaults:
  run:
    shell: bash

jobs:

  analyse:
    name: Run Codeql Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialise
        uses: github/codeql-action/init@v2
        with:
          languages: go
          queries: +security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Analyse
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:go"

  critic:
    name: Run gocritic
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Begin Summary
        run: echo "# Run \`go gocritic\`" >> "${GITHUB_STEP_SUMMARY}"

      - name: Restore gocritic from Cache
        uses: actions/cache@v3
        id: cache-gocritic
        with:
          path: /home/runner/go/bin/gocritic
          key: ${{ runner.os }}-gocritic

      - name: Install gocritic
        if: steps.cache-gocritic.outputs.cache-hit != 'true'
        run: |
          # shellcheck disable=SC2016
          echo '## Tool Installation (`gocritic`)' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go install -v github.com/go-critic/go-critic/cmd/gocritic@latest 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Run gocritic
        run: |
          FAIL_FILE="$(openssl rand -hex 8).failure"

          echo '## Results' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          {
            gocritic check -v -enableAll ./... 2>&1 || touch "${FAIL_FILE}"
          } | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

          if [ -e "${FAIL_FILE}" ]
          then
            rm "${FAIL_FILE}"
            exit 1
          fi

  lint:
    name: Run golint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Begin Summary
        run: echo "# Run \`go golintr\`" >> "${GITHUB_STEP_SUMMARY}"

      - name: Run golintr
        id: golintr
        uses: norwd/golintr@v2

      - name: Summarise Errors
        if: failure()
        env:
          ERRORS: ${{ steps.golintr.outputs.errors }}
        run: |
          echo '## Go lint errors' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          echo "${ERRORS}" 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

  vet:
    name: Run govet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Run govet
        run: |
          # shellcheck disable=SC2016
          echo '# Run `go vet`' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go vet 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

  test:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu', 'macos']
        go: ['^1', '1.19', '1.18', '1.16']
        include:
          - os: 'windows'
            go: '^1'

    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check if any Go files have changed
        id: cache-cover-out
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-cover-out-${{ hashFiles('**/*.go', '**/go.mod', '**/go.sum') }}
          path: cover.out

      - name: Setup Go
        if: steps.cache-cover-out.outputs.cache-hit != 'true'
        id: setup-go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Begin Summary
        run: |
          # shellcheck disable=SC2016
          echo '# Run `go test` on Go${{ steps.setup-go.outputs.go-version }}-${{ runner.os }}' >> "${GITHUB_STEP_SUMMARY}"

      - name: Restore goveralls from Cache
        id: cache-goveralls
        uses: actions/cache@v3
        with:
          path: ~/go/bin/goveralls
          key: ${{ runner.os }}-goveralls

      - name: Install goveralls
        run: |
          # shellcheck disable=SC2016
          echo '## Tool Installation (`goveralls`)' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go install github.com/mattn/goveralls@latest 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Restore gotestfmt from Cache
        if: steps.cache-cover-out.outputs.cache-hit != 'true'
        id: cache-gotestfmt
        uses: actions/cache@v3
        with:
          path: ~/go/bin/gotestfmt
          key: ${{ runner.os }}-gotestfmt

      - name: Install gotestfmt
        if: steps.cache-cover-out.outputs.cache-hit != 'true' && steps.cache-gotestfmt.outputs.cache-hit != 'true'
        run: |
          # shellcheck disable=SC2016
          echo '## Tool Installation (`gotestfmt`)' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Build
        if: steps.cache-cover-out.outputs.cache-hit != 'true'
        run: |
          echo '## Build Log' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go build -v ./... 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Test
        if: steps.cache-cover-out.outputs.cache-hit != 'true'
        run: |
          echo '## Test Results' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go test -json -race -covermode atomic -coverprofile "cover.out" ./... 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}" | gotestfmt
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Upload Test Coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '## Coverage Report' >> "${GITHUB_STEP_SUMMARY}"
          ~/go/bin/goveralls -coverprofile "cover.out" -service github | tee -a "${GITHUB_STEP_SUMMARY}"

  fmt:
    name: Run gofmt and goimports
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.AUTO_GO_FMT_PWORD || secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Begin Summary
        run: |
          # shellcheck disable=SC2016
          echo '# Run `gofmt` and `goimports`' >> "${GITHUB_STEP_SUMMARY}"

      - name: Restore goimports from Cache
        uses: actions/cache@v3
        id: cache-goimports
        with:
          path: /home/runner/go/bin/goimports
          key: ${{ runner.os }}-goimports

      - name: Install goimports
        if: steps.cache-goimports.outputs.cache-hit != 'true'
        run: |
          # shellcheck disable=SC2016
          echo '## Tool Installation (`goimports`)' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          go install golang.org/x/tools/cmd/goimports@latest 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Run gofmt
        run: gofmt -l -w -s .

      - name: Run goimports
        run: goimports -w .

      - name: Setup GPG Keys
        continue-on-error: true
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.AUTO_COMMIT_GPG_PRIVATE_KEY_PWORD }}
          passphrase: ${{ secrets.AUTO_COMMIT_GPG_PASSPHRASE_PWORD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Check for Changes
        id: changes
        uses: tj-actions/verify-changed-files@v13
        with:
          files: |
            **/*.go

      - name: Push Changes
        if: steps.changes.outputs.files_changed == 'true' && github.ref != 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_author: norwd <106889957+norwd@users.noreply.github.com>
          commit_user_name: norwd
          commit_user_email: 106889957+norwd@users.noreply.github.com
          commit_message: Auto go-fmt
          commit_options: -s -S

  report:
    name: Run Go Report Card
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Begin Summary
        run: |
          # shellcheck disable=SC2016
          echo '# Run `goreportcard`' >> "${GITHUB_STEP_SUMMARY}"

      - name: Restore goreportcard Tools from Cache
        uses: actions/cache@v3
        id: cache-goreportcard-bin
        with:
          key: ${{ runner.os }}-goreportcard-bin
          path: '~/go/bin/**'

      - name: Install goreportcard Tools
        if: steps.cache-goreportcard-bin.outputs.cache-hit != 'true'
        run: |
          # shellcheck disable=SC2016
          echo '## Tool Installation (`goreportcard`)' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          (
            git clone https://github.com/gojp/goreportcard.git
            (
              cd goreportcard/
              make install
              go install ./cmd/goreportcard-cli
            )
            rm -rf goreportcard
          ) 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Run Report
        run: |
          echo '## Run Report' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          goreportcard-cli -v 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

      - name: Generate Report Badge
        if: github.ref == 'refs/heads/main'
        run: |
          echo '## Generate Report Card Badge' >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          curl -X POST -F "repo=github.com/$GITHUB_REPOSITORY" https://goreportcard.com/checks 2>&1 | tee -a "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"

  dependencies:
    name: Notify Dependency Submission API
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main'
    permissions:
      checks: write
      contents: write
      deployments: write
      packages: write
      pages: write
      security-events: write
      statuses: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Notify Dependency Submission API
        uses: actions/go-dependency-submission@v1
