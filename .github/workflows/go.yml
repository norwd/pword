---

name: "Go"
run-name: "Go workflow started by @${{ github.actor }}"
permissions: read-all

on:
  push:

defaults:
  run:
    shell: bash

jobs:

  analyse:
    name: Run Codeql Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialise
        uses: github/codeql-action/init@v2
        with:
          languages: go
          queries: +security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Analyse
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:go"

  lint:
    name: Run golint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Run golint
        uses: Jerome1337/golint-action@v1.0.3
        with:
          golint-path: '.'

  vet:
    name: Run govet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Run govet
        run: go vet

  test:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest']
        go: ['^1', '1.19', '1.18', '1.16']
        include:
          - os: 'windows-latest'
            go: '^1'

    name: Run tests on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Restore goveralls from Cache
        uses: actions/cache@v3
        id: cache-goveralls
        with:
          path: ~/go/bin/goveralls
          key: ${{ runner.os }}-goveralls

      - name: Install goveralls
        if: steps.cache-goveralls.outputs.cache-hit != 'true'
        run: |
          go install github.com/mattn/goveralls@latest

      - name: Restore gotestfmt from Cache
        uses: actions/cache@v3
        id: cache-gotestfmt
        with:
          path: ~/go/bin/gotestfmt
          key: ${{ runner.os }}-gotestfmt

      - name: Install gotestfmt
        if: steps.cache-gotestfmt.outputs.cache-hit != 'true'
        run: |
          go install github.com/gotesttools/gotestfmt/v2/cmd/gotestfmt@latest

      - name: Build
        run: |
          go build -v ./...

      - name: Test
        run: |
          go test -json -race -covermode atomic -coverprofile "cover.out" ./... 2>&1 | tee gotest.log | gotestfmt

      - name: Upload Test Coverage
        continue-on-error: true
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          goveralls -coverprofile "cover.out" -service github

  test-status:
    name: Check All Tests Pass
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - name: Tests Passed
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: exit 0
      - name: Tests Failed
        if: ${{ contains(needs.*.result, 'failure') }}
        run: exit 1

  fmt:
    name: Run gofmt and goimports
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.AUTO_GO_FMT_PWORD || secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Restore goimports from Cache
        uses: actions/cache@v3
        id: cache-goimports
        with:
          path: /home/runner/go/bin/goimports
          key: ${{ runner.os }}-goimports

      - name: Install goimports
        if: steps.cache-goimports.outputs.cache-hit != 'true'
        run: |
          go install golang.org/x/tools/cmd/goimports@latest

      - name: Run gofmt
        run: gofmt -l -w -s .

      - name: Run goimports
        run: goimports -w .

      - name: Setup GPG Keys
        continue-on-error: true
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.AUTO_COMMIT_GPG_PRIVATE_KEY_PWORD }}
          passphrase: ${{ secrets.AUTO_COMMIT_GPG_PASSPHRASE_PWORD }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Check for Changes
        id: changes
        uses: tj-actions/verify-changed-files@v12
        with:
          files: |
             **/*.go

      - name: Push Changes
        if: steps.changes.outputs.files_changed == 'true' && github.ref != 'refs/heads/main'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_author: norwd <106889957+norwd@users.noreply.github.com>
          commit_user_name: norwd
          commit_user_email: 106889957+norwd@users.noreply.github.com
          commit_message: Auto go-fmt
          commit_options: -s -S

  report:
    name: Run Go Report Card
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Restore goreportcard Tools from Cache
        uses: actions/cache@v3
        id: cache-goreportcard-bin
        with:
          key: ${{ runner.os }}-goreportcard-bin
          path: '~/go/bin/**'

      - name: Install goreportcard Tools
        if: steps.cache-goreportcard-bin.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/gojp/goreportcard.git
          cd goreportcard
          make install
          go install ./cmd/goreportcard-cli
          cd ..
          rm -rf goreportcard

      - name: Run Report
        run: |
          goreportcard-cli -v

      - name: Generate Report Badge
        if: github.ref == 'refs/heads/main'
        run: |
          curl -X POST -F "repo=github.com/$GITHUB_REPOSITORY" https://goreportcard.com/checks
