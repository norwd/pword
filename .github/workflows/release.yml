---

name: "Release"
run-name: "Release workflow started by @${{ github.actor }}"
permissions: read-all

on:
  push:
    branches: ['main']
    paths: ['internal/cmd/version.go']

defaults:
  run:
    shell: bash

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

concurrency:
  group: release
  cancel-in-progress: true

jobs:

  publish:
    name: 'Publish a Release'
    runs-on: ubuntu-latest
    permissions: write-all
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Install Latest
        run: go install github.com/norwd/pword@latest

      - name: Build
        run: go build .

      - name: Determine Version
        id: version
        run: |
          pword   --version | tr '[:space:]' '\n' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' > version-old.txt
          ./pword --version | tr '[:space:]' '\n' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' > version-new.txt

          echo "prev=$(cat version-old.txt)" | tee -a "${GITHUB_OUTPUT}"
          echo "next=$(cat version-new.txt)" | tee -a "${GITHUB_OUTPUT}"

      - name: Release ${{ steps.version.outputs.next }}
        if: steps.version.outputs.prev != steps.version.outputs.next
        run: |
          gh release create ${{ steps.version.outputs.next }} \
            --title '${{ steps.version.outputs.next }} ðŸ”‘ðŸ”’ðŸ’»' \
            --generate-notes \
            --prerelease \
            --target main | tee release.txt

      - name: Archive Version Numbers
        uses: actions/upload-artifact@v3
        with:
          name: version-data
          path: |
            version-old.txt
            version-new.txt

      - name: Archive API Responses
        uses: actions/upload-artifact@v3
        with:
          name: api-data
          path: |
            release.txt
