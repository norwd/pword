---

name: "Release"
run-name: "Release workflow started by @${{ github.actor }}"
permissions: read-all

on:
  push:
    branches: ['main']
    paths: ['internal/cmd/version.go']

defaults:
  run:
    shell: bash

concurrency:
  group: release
  cancel-in-progress: true

jobs:

  old-version:
    name: "Get Current Version"
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      version: ${{ steps.version.outputs.old }}

    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Install Latest
        run: go install github.com/norwd/pword@latest

      - name: Determine Version
        id: version
        run: echo "old=$(pword --version | tr '[:space:]' '\n' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$')" | tee -a "${GITHUB_OUTPUT}"

  new-version:
    name: "Get Upcoming Version"
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      version: ${{ steps.version.outputs.new }}

    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '^1'

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: go build .

      - name: Determine Version
        id: version
        run: echo "new=$(./pword --version | tr '[:space:]' '\n' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$')" | tee -a "${GITHUB_OUTPUT}"

  publish:
    needs: [old-version, new-version]
    name: 'Publish a Release'
    runs-on: ubuntu-latest
    if: needs.old-version.outputs.version != needs.new-version.outputs.version
    permissions: write-all
    outputs:
      version: ${{ needs.new-version.outputs.version }}

    steps:
      - name: Release ${{ needs.new-version.outputs.version }}
        run: "gh release create ${{ needs.new-version.outputs.version }} --title '${{ needs.new-version.outputs.version }} \U0001F511\U0001F512\U0001F4BB' --generate-notes --prerelease --target main --repo \"${{ github.repository }}\""
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-assets:
    needs: [publish]
    name: "Release Go Binary"
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      matrix:
        goos: ["linux", "windows", "darwin"]
        goarch: ["386", "amd64", "arm64"]
        exclude:
          - goarch: "386"
            goos: darwin
          - goarch: arm64
            goos: windows

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Release ${{ matrix.goos }}/${{ matrix.goarch }}
        uses: wangyoucao577/go-release-action@v1.34
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          release_tag: ${{ needs.publish.outputs.version }}
          extra_files: LICENSE README.md CITATION.cff
          md5sum: false
          sha256sum: true
